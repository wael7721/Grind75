#Brute force, Time complexity O(N^2), only a constant amount of space is used (O(N^2).
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i+1,len(nums),1):
                if nums[i]+nums[j]==target:
                    return [i,j]
#Using Hashset Time O(N),Space O(N)
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        numMap={}
        for i in range(len(nums)):
            if(target-nums[i] in numMap):
                return [numMap[target-nums[i]],i]
            else:
                numMap[nums[i]]=i
