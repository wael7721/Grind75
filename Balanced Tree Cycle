
#worst case O(N^2) Time Complexity, O(N) Space Complexity
class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        if root is None:
            return True

        left_height = self.getHeight(root.left)
        right_height = self.getHeight(root.right)

        if abs(left_height - right_height) > 1:
            return False

        return self.isBalanced(root.left) and self.isBalanced(root.right)

    def getHeight(self, node: Optional[TreeNode]) -> int:
        if node is None:
            return 0
        return 1 + max(self.getHeight(node.left), self.getHeight(node.right))
    
